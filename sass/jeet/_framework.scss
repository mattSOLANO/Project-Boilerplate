@import 'compass';
/*  Syntax quick reference
 *  ----------------------
 *  gutter[gut, g] = 1[float between 0 and 1]
 *  center(max_width = 1410px)
 *  column[col](numerator = 1, denominator = 1, number_of_nested_columns = 0)
 *  span(numerator = 1, denominator = 1)
 *  offset[off](numerator = 0, denominator = 0, col_or_span = column[col, c, span, s], left_or_right = left[right])
 *  get(numerator = 1, denominator = 1, col_or_span = column[col, c, span, s])
 *  bp(w = 705px, mobile_first = false[mf])
 *  endbp()
 *  stack(align = center[c, left, l, right, r])
 *  cf() - clearfix
 */

$gutter: 1;


@mixin center($max_width: 1410px) {
    @include cf;
    max-width: $max_width;
    float: none !important;
    display: block;
    margin-right: auto !important;
    margin-left: auto !important;
    *margin-right: auto !important;
    *margin-left: auto !important;
}

@mixin column($numerator: 1, $denominator: 1, $number_of_nested_columns: 0, $g: $gutter) {
    @include cf;
    float: left;
    @if $number_of_nested_columns !=0 {
        width: ((100 - ($g * 2) * ($number_of_nested_columns - 1)) / $number_of_nested_columns) + unquote("%");
        margin-left: $g + unquote("%");
        margin-right:  $g + unquote("%");
        &:first-child {
            margin-left: 0;
        }
        &:last-child {
            margin-right: 0;
        }
    } @else {
        width: ((($numerator / $denominator) * 100) - ($g * 2)) + unquote("%");
        margin-left: $g + unquote("%");
        margin-right: $g + unquote("%");
    }
}

@mixin span($numerator: 1, $denominator: 1) {
    @include cf;
    float: left;
    width: (($numerator / $denominator) * 100) + unquote("%");
    margin-left: 0;
    margin-right: 0;
}

@mixin offset($numerator: 0, $denominator: 0, $left_or_right: left, $col_or_span: column) {
    $n: $numerator;
    $d: $denominator;
    $span: (($n/$d) * 100);
    $col: (($n/$d) * 100) + ($g);
    @if $col_or_span == span or $col_or_span == s {
        @if $left_or_right == right or $left_or_right == r {
            margin-right: $span + unquote("%");
        } @else {
            margin-left: $span + unquote("%");
        }
    }
    @if $col_or_span == column or $col_or_span == col or $col_or_span == c {
        @if $left_or_right == right or $left_or_right == r {
            margin-right: $col + unquote("%");
        } @else {
            margin-left: $col + unquote("%");
        }
    }
}

@function get($numerator: 1, $denominator: 1, $col_or_span: column) {
    $n: $numerator;
    $d: $denominator;
    $span: (($n/$d) * 100);
    $col: (($n/$d) * 100) - ($g * 2);
    @if $col_or_span == span or $col_or_span == s {
        @return $span + unquote("%")
    } @else {
        @return $col + unquote("%")
    }
}

@mixin bp($w: 705px, $mobile_first: false) {
    @if $mobile_first == mf {
        @media all and (min-width: $w){@content};
    }
    @else {
        @media all and (max-width: $w){@content};
    }
}

@mixin stack($align: c) {
    display: block;
    width: 100%;
    margin-left: auto !important;
    margin-right: auto !important;
    margin-bottom: $g + unquote("%");
    @if $align == left or $align == l{
        text-align: left;
    } @else if $align == right or $align == r {
        text-align: right;
    } @else {
        text-align: center;
    }
}

// aliases
$g: $gutter;
$gut: $gutter;
@mixin col($args...) {
    @include column($args...)
}
@mixin off($args...) {
    @include offset($args...)
}
// compass mixin
@mixin cf{
    @include pie-clearfix;
}
* {
    box-sizing: border-box;
    *behavior: url(js/vendor/boxsizing.htc);
}
html {
    overflow-y: scroll;
    overflow-x: hidden; 
}
body {
    @include cf;
    width: 100%;
}
img, video, audio, embed, object, input, iframe {
    max-width: 100%;
}
.placeholder {
    color: #aaa;
}
